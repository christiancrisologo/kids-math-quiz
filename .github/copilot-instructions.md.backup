# Copilot Instructions for MathQuiz

## Project Overview
MathQuiz is a mathematics learning application designed to help users practice and improve their math skills through interactive quizzes. It is called **Math Quiz App** in Next.js with Tailwind CSS styles. The app is designed for kids to practice math operations (addition, subtraction, multiplication, division) in a fun and interactive way.


## Architecture Principles
- **Component-based design**: UI components should be modular and reusable
- **Question generation**: Math problems should be algorithmically generated with configurable difficulty
- **Progress tracking**: User performance and learning analytics are core features
- **Responsive design**: Application should work across desktop and mobile devices

## Development Guidelines

### Code Organization
- Place reusable math utilities in `/utils/math/` or similar
- Keep question generation logic separate from UI components
- Use TypeScript for type safety with mathematical operations
- Organize by feature (quiz, progress, settings) rather than file type

### Math Quiz Patterns
- **Question types**: Support multiple formats (multiple choice, fill-in-blank)
- **Difficulty scaling**: Implement progressive difficulty based on user performance
- **Answer validation**: Handle floating-point precision issues for decimal answers
- **Timer functionality**: Include configurable time limits per question or quiz

### Data Management
- **Local storage**: Use for offline practice and progress persistence
- **State management**: Centralize quiz state (current question, score, time remaining)
- **Performance analytics**: Track response times, accuracy rates, and learning patterns

### Testing Approach
- Unit test math generation functions for edge cases
- Test answer validation logic thoroughly (especially with decimals/fractions)
- Include accessibility testing for screen readers and keyboard navigation
- Performance test with large question sets

### UI/UX Considerations
- **Immediate feedback**: Provide instant visual feedback for correct/incorrect answers
- **Progress indicators**: Show completion status and performance metrics
- **Error prevention**: Validate user inputs and provide helpful error messages
- **Mobile-first**: Design touch-friendly interfaces for mathematical input


## Integration Points
- **Math libraries**: Consider MathJax or KaTeX for equation rendering
- **Analytics**: Integrate learning analytics for educational insights
- **Authentication**: Plan for user accounts and progress synchronization
- **Accessibility**: Ensure WCAG compliance for educational applications

## Common Patterns
- Use consistent number formatting and precision handling
- Implement debounced input validation for mathematical expressions
- Create reusable components for common question types
- Maintain consistent scoring and feedback mechanisms

---

## Steps to create MathQuiz

### Task 1: Landing / Setup Page

- Create the first page of the app, where the user will:

- Enter their **username**.
- Choose **difficulty**:
  - Easy
  - Hard
- Select the **number of questions per quiz run** (minimum 5 questions).
- Set a **timer** per question (default 10 seconds, but allow customization).
- Choose **question type**:
  - Math expression (e.g., 4 + 3 = ?)
  - Math problem with multiple choices (3 choices)
- Select the **math operation**:
  - Addition
  - Subtraction
  - Multiplication
  - Division
  - Mix of the 4 types

**UI Requirements:**
- Use Tailwind for styling inputs, buttons, and layout.
- Provide a “Start Quiz” button that routes to the quiz page with the configured options stored in a state management solution (recommend using React Context or Zustand).

---

### Task 2: Quiz Page

- Build the quiz mechanics on a second page.  

- The page will:
  - Show the current question
  - Present either:
    - an input box for answering a math expression
    - or 3 multiple-choice options
  - Show the running timer for each question
  - Move automatically to the next question after:
    - the user submits the answer
    - or the timer runs out
  - Record the answer for later assessment

**Recommendations:**
- Store current question index, answer history, and timer state in local React state or global store.
- Use `useEffect` to handle the countdown timer.
- Ensure a smooth transition to the next question after submission.

---

### Task 3: Assessment / Result Page

- Create a final page that:

- Shows a **summary** of answered questions
  - Indicate correct vs incorrect answers
  - Show the total score or grade
- Option to **retry** the quiz (restart with same settings)
- Option to **return to the setup page** to reconfigure

**Suggestions for grading:**
- Show number of correct answers
- Show percentage score
- Use encouraging messages (e.g., “Great job!” / “Try again!”)
- Use Tailwind to style the result page clearly and kid-friendly

---

### Other Implementation Notes

- Use **Next.js** routing (`pages/` directory) to handle navigation.
- For question generation, consider creating a utility function to randomly generate problems based on the selected difficulty and operation.
- Ensure accessibility (proper labels, focus handling).
- Keep the code modular (e.g., separate components for Question, Timer, Results, etc.).
- Keep UI fun and colorful for kids, but clean.


### Future feature iterations
- Admin page to manage users, questions, and results
- Add support for **fractions** and **decimals**.
- Implement **progress tracking** for each user.
- Allow users to **review past quizzes** and see performance over time.
- Add **leaderboards** to compare performance with other users.
- Include **educational resources** (e.g., tips, explanations) for incorrect answers.

---

**End of prompt_instruction.md**
